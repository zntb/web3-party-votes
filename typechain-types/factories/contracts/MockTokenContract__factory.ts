/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockTokenContract,
  MockTokenContractInterface,
} from "../../contracts/MockTokenContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102e3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806370a082311461003b578063e30443bc1461006b575b600080fd5b610055600480360381019061005091906101e0565b610087565b6040516100629190610226565b60405180910390f35b6100856004803603810190610080919061026d565b61010b565b005b600061009d67ceb88126d702f7d560c01b61017a565b6100b1674991cc6a09030ea160c01b61017a565b6100c56722a82f37dbc70c5460c01b61017a565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61011f678dfe112b3f12b6c760c01b61017a565b61013367f5a1b4e5c83ff92360c01b61017a565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101ad82610182565b9050919050565b6101bd816101a2565b81146101c857600080fd5b50565b6000813590506101da816101b4565b92915050565b6000602082840312156101f6576101f561017d565b5b6000610204848285016101cb565b91505092915050565b6000819050919050565b6102208161020d565b82525050565b600060208201905061023b6000830184610217565b92915050565b61024a8161020d565b811461025557600080fd5b50565b60008135905061026781610241565b92915050565b600080604083850312156102845761028361017d565b5b6000610292858286016101cb565b92505060206102a385828601610258565b915050925092905056fea264697066735822122062c958db00144ebf780f0f94591f83fe6886645c68f734c77ab48d77f7d634ba64736f6c63430008180033";

type MockTokenContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTokenContract__factory extends ContractFactory {
  constructor(...args: MockTokenContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockTokenContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockTokenContract__factory {
    return super.connect(runner) as MockTokenContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenContractInterface {
    return new Interface(_abi) as MockTokenContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockTokenContract {
    return new Contract(address, _abi, runner) as unknown as MockTokenContract;
  }
}
